version: "3.8"

services:
  api-gateway:
    build:
      context: ./../api-gateway
      dockerfile: ./../api-gateway/Dockerfile
    restart: always
    ports:
      - "80:80"
    depends_on:
      - authentication-service
      # - inventory-service
      # - order-service
    environment:
      MODE: docker

  authentication-service:
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/Dockerfile
    depends_on:
      authentication-postgres:
        condition: service_healthy
    restart: always
    ports:
      - "8001:8001"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MODE: docker
      POSTGRES_USER: authentication-postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST: authentication-postgres
      POSTGRES_PORT: "5432"
      POSTGRES_DB: imsdb
      SERVICE_PORT: "8001"

  authentication-postgres:
    image: "postgres:14.2"
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: authentication-postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: imsdb
    # volumes:
    #   # using volumes instead of bind mounts
    #   - postgres-authentication:/var/lib/postgresql/data
    #   - ./init-db/init-authentication-db.sql:/docker-entrypoint-initdb.d/init-authentication-db.sql
    healthcheck:
      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"
      interval: 10s
      timeout: 2s

  # inventory-service:
  #   build:
  #     context: ./../inventory-service
  #     dockerfile: ./../inventory-service/Dockerfile
  #   depends_on:
  #     inventory-mysql:
  #       condition: service_healthy
  #   restart: always
  #   ports:
  #     - "8002:8002"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     MODE: docker
  #     MYSQL_USER: inventory-mysql
  #     MYSQL_PASSWORD: password
  #     MYSQL_HOST: inventory-mysql
  #     MYSQL_PORT: "3306"
  #     MYSQL_DATABASE: imsdb
  #     SERVICE_PORT: "8002"

  # inventory-mysql:
  #   image: "mysql:8.0"
  #   ports:
  #     - "3306:3306"
  #   restart: always
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     MYSQL_ROOT_PASSWORD: secret-password
  #     MYSQL_USER: inventory-mysql
  #     MYSQL_PASSWORD: password
  #     MYSQL_DATABASE: imsdb
  #   # volumes:
  #   # using volumes instead of bind mounts
  #   # - mysql:/var/lib/mysql
  #   # - ./init-db/init-inventory-db.sql:/docker-entrypoint-initdb.d/init-inventory-db.sql
  #   healthcheck:
  #     test: mysqladmin ping -u$$MYSQL_USER -p$$MYSQL_PASSWORD
  #     interval: 10s
  #     timeout: 2s

  # order-service:
  #   build:
  #     context: ./../order-service
  #     dockerfile: ./../order-service/Dockerfile
  #   depends_on:
  #     order-postgres:
  #       condition: service_healthy
  #   restart: always
  #   ports:
  #     - "8003:8003"
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     MODE: docker
  #     POSTGRES_USER: order-postgres
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_HOST: order-postgres
  #     POSTGRES_PORT: "5432"
  #     POSTGRES_DB: imsdb
  #     SERVICE_PORT: "8003"

  # order-postgres:
  #   image: "postgres:14.2"
  #   ports:
  #     - "5433:5432"
  #   restart: always
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #   environment:
  #     POSTGRES_USER: order-postgres
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: imsdb
  #   # volumes:
  #   # using volumes instead of bind mounts
  #   # - postgres-order:/var/lib/postgresql/data
  #   # - ./init-db/init-order-db.sql:/docker-entrypoint-initdb.d/init-order-db.sql
  #   healthcheck:
  #     test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"
  #     interval: 10s
  #     timeout: 2s

  # # manages kafka brokers
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.3.0
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # # kafka broker service and depends on Zookeeper
  # broker:
  #   image: confluentinc/cp-kafka:7.3.0
  #   ports:
  #     # To learn about configuring Kafka for access across networks, see
  #     # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
  #     - "9092:9092"
  #   depends_on:
  #     - zookeeper
  #   healthcheck:
  #     test:
  #       ["CMD", "kafka-topics", "--bootstrap-server", "broker:9092", "--list"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  consul:
    image: hashicorp/consul:1.15.4
    ports:
      - "8500:8500" # Web UI
      - "8600:8600/udp" # DNS interface
    command: agent -dev -client=0.0.0.0

  redis:
    image: redis:7.4.2
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=password
    command:
      - redis-server
      - "--requirepass"
      - "${REDIS_PASSWORD}"

volumes:
  postgres-authentication:
  # postgres-order:
  mysql:
